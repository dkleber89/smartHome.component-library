{
  "story": {
    "prefix": "story",
    "body": [
      "import React, { ReactElement } from 'react';",
      "import { action } from '@storybook/addon-actions';",
      "import { withKnobs } from '@storybook/addon-knobs';",
      "",
      "import ${TM_FILENAME_BASE/(.*)\\..+$/$1/} from './${TM_FILENAME_BASE/(.*)\\..+$/$1/}';",
      "",
      "export default {",
      "  title: '${TM_FILENAME_BASE/(.*)\\..+$/$1/}',",
      "  component: ${TM_FILENAME_BASE/(.*)\\..+$/$1/},",
      "  decorators: [withKnobs],",
      "  parameters: {",
      "    info: `",
      "    ### Additional Markdown Information about this Component",
      "    `,",
      "  },",
      "};",
      "",
      "export const Default = (): ReactElement => (",
      "  <${TM_FILENAME_BASE/(.*)\\..+$/$1/} />",
      ");"
    ],
    "description": "Story Template with default Story"
  },
  "componentStyled": {
    "prefix": "componentStyled",
    "body": [
      "import React, { ReactElement } from 'react';",
      "import styled from 'styled-components';",
      "",
      "export interface I${TM_FILENAME_BASE}Props {",
      "  /** Component className */",
      "  className?: string;",
      "}",
      "",
      "const Styled${TM_FILENAME_BASE} = styled.${1:HtmlElement}<I${TM_FILENAME_BASE}Props>``;",
      "",
      "const ${TM_FILENAME_BASE} = ({ className }: I${TM_FILENAME_BASE}Props): ReactElement => {",
      "  return <Styled${TM_FILENAME_BASE} className={className} />;",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};",
      ""
    ],
    "description": "Component independent from Material UI"
  },
  "componentMui": {
    "prefix": "componentMui",
    "body": [
      "import React, { ReactElement } from 'react';",
      "import { ${1:MaterialComponent} as Mui${1:MaterialComponent} } from '@material-ui/core';",
      "import styled from 'styled-components';",
      "",
      "export interface I${TM_FILENAME_BASE}Props {",
      "  /** Component className */",
      "  className?: string;",
      "}",
      "",
      "const Styled${TM_FILENAME_BASE} = styled(Mui${1:MaterialComponent})<I${TM_FILENAME_BASE}Props>``;",
      "",
      "const ${TM_FILENAME_BASE} = ({ className }: I${TM_FILENAME_BASE}Props): ReactElement => {",
      "  return <Styled${TM_FILENAME_BASE} className={className} />;",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};",
      ""
    ],
    "description": "Component with styled MUI Component"
  },
  "component": {
    "prefix": "component",
    "body": [
      "import React, { ReactElement } from 'react';",
      "import {  } from '@material-ui/core';",
      "import styled from 'styled-components';",
      "",
      "export interface I${TM_FILENAME_BASE}Props {",
      "  /** Component className */",
      "  className?: string;",
      "}",
      "",
      "const Styled${TM_FILENAME_BASE} = styled.${1:HTMLComponent}<I${TM_FILENAME_BASE}Props>``;",
      "",
      "const ${TM_FILENAME_BASE} = ({ className }: I${TM_FILENAME_BASE}Props): ReactElement => {",
      "  return (",
      "    <Styled${TM_FILENAME_BASE} className={className}>",
      "      $0",
      "    </Styled${TM_FILENAME_BASE}>",
      "  );",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};",
      ""
    ],
    "description": "Own Component with own or Material Components inside"
  },
  "test": {
    "prefix": "test",
    "body": [
      "import React from 'react';",
      "import { RenderResult } from '@testing-library/react';",
      "import renderWithTheme from '../../testUtils';",
      "",
      "import ${TM_FILENAME_BASE/(.*)\\..+$/$1/} from './${TM_FILENAME_BASE/(.*)\\..+$/$1/}';",
      "",
      "describe('${TM_FILENAME_BASE/(.*)\\..+$/$1/} test', () => {",
      "  test('snapshot', () => {",
      "    const { container } = renderWithTheme(<${TM_FILENAME_BASE/(.*)\\..+$/$1/} />);",
      "",
      "    expect(container.firstChild).toMatchSnapshot();",
      "  });",
      "",
      "  // Test Props -> Snippet: testProps",
      "",
      "  // Test Events -> Snippet: testEvents",
      "});",
      ""
    ],
    "description": "Test Template with main Test Content"
  },
  "testEvents": {
    "prefix": "testEvents",
    "body": [
      "  describe('events', () => {",
      "    let renderResult: RenderResult;",
      "    const on${1/(.)/${1:/upcase}/}Mock = jest.fn();",
      "",
      "    beforeEach(() => {",
      "      renderResult = renderWithTheme(<${TM_FILENAME_BASE/(.*)\\..+$/$1/} on${1/(.)/${1:/upcase}/}={on${1/(.)/${1:/upcase}/}Mock} />);",
      "    });",
      "",
      "    test('${1/(.)/${1:/downcase}/}', () => {",
      "      // Example when is a click Event e.g. on a Button",
      "      // fireEvent.click(renderResult.getByText(/Visible Text/));",
      "",
      "      expect(on${1/(.)/${1:/upcase}/}Mock).toHaveBeenCalledTimes(1);",
      "    });",
      "  });"
    ],
    "description": "Test Events Snippet"
  },
  "testProps": {
    "prefix": "testProps",
    "body": [
      "  describe('props', () => {",
      "    let renderResult: RenderResult;",
      "",
      "    beforeEach(() => {",
      "      renderResult = renderWithTheme(<${TM_FILENAME_BASE/(.*)\\..+$/$1/} />);",
      "    });",
      "",
      "    test('${1:What should be tested?}', () => {",
      "      $BLOCK_COMMENT_START",
      "      Example:",
      "      const { container, rerender, queryByTestId } = renderResult;",
      "       ",
      "      expect(container.firstChild).toHaveStyleRule('background-color', lightTheme.palette.primary.light);",
      "      expect(queryByTestId('test')).toBeFalsy();",
      "",
      "      rerender(<Button isButtonDeactivated />);",
      "",
      "      expect(container.firstChild).toHaveStyleRule('background-color', lightTheme.palette.primary.dark);",
      "      expect(queryByTestId('test')).toBeTruthy();",
      "      $BLOCK_COMMENT_END",
      "    });",
      "  });"
    ],
    "description": "Test Props Snippet"
  }
}
